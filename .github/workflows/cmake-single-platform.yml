# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake_Ninja

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    -uses: actions/checkout@v4
    
    -name: Setup vcpkg
     run: |
       git clone https://github.com/vcpkg.git
       cd vcpkg
       .bootstrap-vcpkg.bat
       $vcpkg_root = $(Get-Location).Path
       echo "VCPKG_ROOT=$vcpkg_root" | Out-File -FilePath $env:GITHUB_ENV -Append
       echo "$vcpkg_root" | Out-File -FilePath $env:GITHUB_PATH -Append
      shell: pwsh
    
    -name: Add dependencies
     working-directory: ${{github.workspace}}
     run: |
      vcpkg new --application
      vcpkg add port sfml
     shell: cmd     
    
    -name: Configure CMake
     working-directory: ${{github.workspace}}
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cmake -S -B build
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT/scripts/buildsystems/vcpkg.camke"
      shell: pwsh

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    -name: Run    
     working-directory: ${{github.workspace}}/build/src/${{env.BUILD_TYPE}}
     run: |
       start /b .\CMake_Ninja.exe
       timeout /t 5
       taskkill /f /im CMake_Ninja.exe
     

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

